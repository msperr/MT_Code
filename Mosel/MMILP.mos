model "model"
	
	options noimplicit, explterm;
	uses "mmxprs";
	
	parameters
		INSTANCE     = "..\\data\\instance";
		INSTANCEFILE = INSTANCE + ".txt";
		OUTFILE      = INSTANCE + ".xpress.txt";
	end-parameters
	
	setparam("XPRS_verbose", true);
	setparam("XPRS_heurstrategy", 0);
	setparam("XPRS_presolve", 0);
	
	!!!

	declarations
		VEHICLES: set of string;
		CUSTOMERS: set of integer;
		DS: string;
		DE: string;
	end-declarations
	
	initializations from INSTANCEFILE
		VEHICLES as 'Vehicles';
		CUSTOMERS as 'Customers';
		DS;
		DE;
	end-initializations
	
	finalize(VEHICLES);
	finalize(CUSTOMERS);
	
	writeln("Customers: ", getsize(CUSTOMERS));
	writeln("Vehicles: ", getsize(VEHICLES));
	
	declarations
		CUSTOMER_ROUTES: array(CUSTOMERS) of set of integer;
		ROUTES: set of integer;
	end-declarations
	
	initializations from INSTANCEFILE
		CUSTOMER_ROUTES as 'Customer_Routes';
	end-initializations
	
	forall(customer in CUSTOMERS) finalize(CUSTOMER_ROUTES(customer));
	
	ROUTES := union(customer in CUSTOMERS) CUSTOMER_ROUTES(customer);
	finalize(ROUTES);
	
	writeln("Routes: ", getsize(ROUTES));
	
	declarations
		ROUTE_TRIPS: array(ROUTES) of set of string;
		TRIPS: set of string;
		NODES: set of string;
		VERTICES: set of string;
	end-declarations
	
	initializations from INSTANCEFILE
		ROUTE_TRIPS as 'Routes';
	end-initializations

	forall(route in ROUTES) finalize(ROUTE_TRIPS(route));
	
	TRIPS := union(route in ROUTES) ROUTE_TRIPS(route);
	finalize(TRIPS);
	NODES := VEHICLES + TRIPS;
	finalize(NODES);
	VERTICES := {DS, DE} + VEHICLES + TRIPS;
	finalize(VERTICES);
	
	writeln("Trips: ", getsize(TRIPS));
	writeln("Vertices: ", getsize(VERTICES));
	
	!!!
	
	declarations
		REFUELPOINT: array(NODES, TRIPS) of string;
	end-declarations
	
	initializations from INSTANCEFILE
		REFUELPOINT as 'Refuelpoints';
	end-initializations
	
	writeln("Refuel point copies: ", sum(s in NODES, t in NODES | exists(REFUELPOINT(s, t))) getsize(REFUELPOINT(s, t)));
	
	!!!
	
	declarations
		NIN:  array(VERTICES) of set of string;
		NOUT: array(VERTICES) of set of string;
		
		F0: array(VEHICLES) of real;
		FT: array(TRIPS) of real;
		FE: array(NODES, TRIPS) of real;
		FG: array(NODES, TRIPS) of real;
		FH: array(NODES, TRIPS) of real;
		FD: array(NODES, TRIPS) of real;
		FR: array(NODES, TRIPS) of real;
		
		CV: real;
		CT: array(TRIPS) of real;
		CE: array(NODES, TRIPS) of real;
		CD: array(NODES, TRIPS) of real;
	end-declarations
	
	initializations from INSTANCEFILE
		NIN as 'Nin';
		NOUT as 'Nout';
		
		F0;
		FT;
		FE;
		FG;
		FH;
		FD;
		FR;
		
		CV as 'Vehicle_Cost';
		CT;
		CE;
		CD;
	end-initializations
	
	forall(v in VERTICES) finalize(NIN(v));
	forall(v in VERTICES) finalize(NOUT(v));
	
	writeln("Data read.");
	
	!!!
	
	!forward procedure read_solution(filename: string, sol_x: array(VERTICES, VERTICES) of real, sol_z: array(NODES, NODES, REFUELPOINTS) of real, sol_e: array(NODES) of real)
	forward procedure write_solution(filename: string, sol_x: array(VERTICES, VERTICES) of real, sol_z: array(NODES, TRIPS) of real)
	!forward procedure load_solution(sol_x: array(VERTICES, VERTICES) of real, sol_z: array(NODES, NODES, REFUELPOINTS) of real, sol_e: array(NODES) of real)
	forward procedure store_solution(sol_x: array(VERTICES, VERTICES) of real, sol_z: array(NODES, TRIPS) of real, sol_e: array(NODES) of real, sol_u: array(ROUTES) of real)
	
	!!!
	
	declarations
		
		x: dynamic array(VERTICES, VERTICES) of mpvar;
		z: dynamic array(NODES, TRIPS) of mpvar;
		e: array(NODES) of mpvar;
		u: array(ROUTES) of mpvar;
		
		outflow: array(VERTICES) of linctr;
		inflow: array(VERTICES) of linctr;
		
	end-declarations
		
	forall(s in VERTICES, t in NOUT(s)) create(x(s, t));
	forall(s in NODES, t in NOUT(s) | (t <> DE) and (REFUELPOINT(s, t) <> "")) create(z(s, t));
	
	forall(v in VERTICES) inflow(v)  := sum(w in NIN(v)) x(w, v);
	forall(v in VERTICES) outflow(v) := sum(w in NOUT(v)) x(v, w);

	declarations
		
		CarNumber: linctr;
		Distance: linctr;
		TripCost: linctr;
		DeadheadCost: linctr;
		TotalCost: linctr;
		FuelSum: linctr;
		TripNumber: linctr;
		Refueling: linctr;
		
		BinaryX: dynamic array(VERTICES, VERTICES) of linctr;
		BinaryZ: dynamic array(NODES, TRIPS) of linctr;
		IntervalE: array(NODES) of linctr;
		BinaryU: dynamic array(ROUTES) of linctr;
		DominanceXZ: dynamic array(NODES, NODES) of linctr;
		VehicleInflow: array(VEHICLES) of linctr;
		FlowConservation: array(NODES) of linctr;
		Customer: array(CUSTOMERS) of linctr;
		Route: array(TRIPS) of linctr;
		InitialFuel: array(VEHICLES) of linctr;
		BeforeRefuel: array(VERTICES,VERTICES) of linctr;
		AfterRefuel: array(VERTICES,VERTICES) of linctr;
		FuelLinkage: array(VERTICES,VERTICES) of linctr;
		
	end-declarations
	
	declarations
		sol_x: array(VERTICES, VERTICES) of real;
		sol_z: array(NODES, TRIPS) of real;
		sol_e: array(NODES) of real;
		sol_u: array(ROUTES) of real;
	end-declarations
	
	!read_solution(INITSOLFILE, sol_x, sol_z, sol_e);
	
	with mpproblem do
		
		CarNumber := outflow(DS) - sum(s in VEHICLES) x(s, DE);
		TripCost := sum(t in TRIPS, s in NIN(t)) x(s, t) * CT(t);
		DeadheadCost := sum(t in TRIPS, s in NIN(t)) (x(s, t) * CE(s, t) + z(s, t) * FD(s, t));
		TotalCost := CarNumber * CV + TripCost + DeadheadCost;
		TripNumber := sum(t in TRIPS, s in NIN(t)) x(s, t);
		Refueling := sum(s in NODES, t in NOUT(s) | t <> DE and REFUELPOINT(s, t) <> "") z(s, t);
			
		forall(s in VERTICES, t in NOUT(s))			BinaryX(s, t) := x(s, t) is_binary;
		forall(s in NODES, t in NOUT(s) | t <> DE)	BinaryZ(s, t) := z(s, t) is_binary;
		forall(t in NODES)							IntervalE(t) := e(t) <= 1;
		
		forall(s in NODES, t in NOUT(s) | t <> DE)	DominanceXZ(s, t)   := z(s,t) <= x(s, t);
		forall(s in VEHICLES)						VehicleInflow(s)    := inflow(s) = 1;
		forall(t in NODES)							FlowConservation(t) := outflow(t) = inflow(t);
		forall(c in CUSTOMERS)						Customer(c)			:= sum(m in CUSTOMER_ROUTES(c)) u(m) = 1;
		forall(m in ROUTES) forall(t in ROUTE_TRIPS(m))	Route(t)		:= sum(s in NIN(t)) x(s, t) = u(m);
		forall(s in VEHICLES)						InitialFuel(s)      := e(s) <= F0(s);
		forall(s in NODES, t in NOUT(s) | t <> DE)	BeforeRefuel(s, t)  := z(s, t) * FG(s, t) <= e(s);
		forall(s in NODES, t in NOUT(s) | t <> DE)	AfterRefuel(s, t)   := e(t) <= 1 - z(s, t) * FH(s, t) - FT(t);
		forall(s in NODES, t in NOUT(s) | t <> DE)	FuelLinkage(s, t)   := e(t) <= e(s) - x(s, t) * (FE(s, t) + FT(t)) + z(s, t) * (FG(s, t) + FR(s, t) + FH(s, t) - FE(s, t)) + 1 - x(s, t);
		
		loadprob(TotalCost);
		writeln("Model loaded.");
		
		!!!
		
		!load_solution(sol_x, sol_z, sol_e);
		
		minimize(TotalCost);
		
		writeln("Total Cost: ", getsol(TotalCost));
		writeln("Number of cars: ", getsol(CarNumber));
		writeln("Trip Cost: ", getsol(TripCost));
		writeln("Deadhead Cost: ", getsol(DeadheadCost));
		writeln("Trips: ", getsol(TripNumber));
		writeln("Number of refuelings: ", getsol(Refueling));
		
		store_solution(sol_x, sol_z, sol_e, sol_u);
		
	end-do
	
	write_solution(OUTFILE, sol_x, sol_z);
	
	!!!
	
	procedure write_solution(filename: string, sol_x: array(VERTICES, VERTICES) of real, sol_z: array(NODES, TRIPS) of real)
		
		declarations
			DUTIES: array(VEHICLES) of list of list of string;
			t: string;
			u: string;
			r: string;
		end-declarations
		
		forall(s in VEHICLES) do
			DUTIES(s) := [];
			t := s;
			while(true) do
				u := DE;
				forall(v in NOUT(t) | sol_x(t, v) = 1) u := v;
				if u = DE then
					break;
				end-if
				r := '';
				if sol_z(t, u) = 1 then
					r := REFUELPOINT(t, u);
				end-if
				DUTIES(s) += [[u, r]];
				t := u;
			end-do
		end-do
		
		initializations to filename
			DUTIES as 'Duties';
		end-initializations
		
	end-procedure
	
	procedure store_solution(sol_x: array(VERTICES, VERTICES) of real, sol_z: array(NODES, TRIPS) of real, sol_e: array(NODES) of real, sol_u: array(ROUTES) of real)
		
		forall(s in VERTICES, t in NOUT(s))											sol_x(s, t)	:= getsol(x(s, t));
		forall(s in NODES, t in NOUT(s) | (t <> DE) and (REFUELPOINT(s, t) <> ""))	sol_z(s, t)	:= getsol(z(s, t));
		forall(t in NODES)															sol_e(t)	:= getsol(e(t));
		forall(m in ROUTES)															sol_u(m)	:= getsol(u(m));
		
	end-procedure
	
end-model